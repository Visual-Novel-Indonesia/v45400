#==============================================================================
# ■ RGSS3 非表示アイテム・スキル Ver2.02 by 星潟
#------------------------------------------------------------------------------
#  特定アイテム・スキルをアイテム・スキルウィンドウに表示しないようにします。
#  また、戦闘中のみ非表示に設定する事も可能です。
#------------------------------------------------------------------------------
#  ★ 戦闘中に表示したくないアイテム・スキルの場合
#  
#  そのアイテム・スキルのメモ欄に<戦闘時非表示>と記入。
#------------------------------------------------------------------------------
#  ★ 非戦闘時に表示したくないアイテム・スキルの場合
#  
#  そのアイテム・スキルのメモ欄に<非戦闘時非表示>と記入。
#------------------------------------------------------------------------------
#  ★ 常に表示したくないアイテム・スキルの場合
#  
#  そのアイテム・スキルのメモ欄に<常時非表示>と記入。
#------------------------------------------------------------------------------
#  ※もしも複数設定してある場合は
#    <常時非表示>が最優先され、次に<非戦闘時非表示>が優先されます。
#------------------------------------------------------------------------------
# Ver2.00 非表示設定を個別に決定できるように変更し
#         競合しにくいように仕様を変更しつつ、軽量化を施しました。
#         設定方法が変更されているので注意を。
# Ver2.01 戦闘中のアイテム表示設定ミスを修正しました。
# Ver2.02 ショップ画面等でエラーが起きる致命的不具合を修正しました。
#==============================================================================
module INVISIBLE_IS
  
  #戦闘時に表示したくない場合の設定用キーワードを指定します。
  
  WORD1 = "<戦闘時非表示>"
  
  #非戦闘時に表示したくない場合の設定用キーワードを指定します。
  
  WORD2 = "<非戦闘時非表示>"
  
  #常に表示したくない場合の設定用キーワードを指定します。
  
  WORD3 = "<常時非表示>"
  
end
class Window_SkillList < Window_Selectable
  #--------------------------------------------------------------------------
  # スキルをリストに含めるかどうか
  #--------------------------------------------------------------------------
  alias include_invisible? include?
  def include?(item)
    
    #本来の処理を実行。
    
    flag = include_invisible?(item)
    
    #本来の処理と可視条件が共にtrueの場合のみ表示。
    
    flag && item_visible_flag(item)
    
  end
  #--------------------------------------------------------------------------
  # 可視条件
  #--------------------------------------------------------------------------
  def item_visible_flag(item)
    
    #スキルの可視タイミングで分岐。
    
    case item.visible_timing
    when 0;true                                  #常時表示
    when 1;!SceneManager.scene_is?(Scene_Battle) #戦闘時、非表示
    when 2;SceneManager.scene_is?(Scene_Battle)  #非戦闘時、非表示
    when 3;false                                 #常時非表示
    end
    
  end
end
class Window_ItemList < Window_Selectable
  #--------------------------------------------------------------------------
  # アイテムをリストに含めるかどうか
  #--------------------------------------------------------------------------
  alias include_invisible? include?
  def include?(item)
    
    #本来の処理を実行。
    
    flag = include_invisible?(item)
    
    #本来の処理と可視条件が共にtrueの場合のみ表示。
    
    flag && item_visible_flag(item)
    
  end
  #--------------------------------------------------------------------------
  # 可視条件
  #--------------------------------------------------------------------------
  def item_visible_flag(item)
    
    #アイテムの可視タイミングで分岐。
    
    case item.visible_timing
    when 0;true                                  #常時表示
    when 1;!SceneManager.scene_is?(Scene_Battle) #戦闘時、非表示
    when 2;SceneManager.scene_is?(Scene_Battle)  #非戦闘時、非表示
    when 3;false                                 #常時非表示
    end
    
  end
end
class Window_BattleItem < Window_ItemList
  #--------------------------------------------------------------------------
  # アイテムをリストに含めるかどうか
  #--------------------------------------------------------------------------
  alias include_invisible? include?
  def include?(item)
    
    #本来の処理を実行。
    
    flag = include_invisible?(item)
    
    #本来の処理と可視条件が共にtrueの場合のみ表示。
    
    flag && item_visible_flag(item)
    
  end
end
module VisibleItemTiming
  #--------------------------------------------------------------------------
  # アイテム/スキルの可視タイミング
  #--------------------------------------------------------------------------
  def visible_timing
    
    #キャッシュが存在する場合はキャッシュを返す。
    
    return @visible_timing if @visible_timing != nil
    
    #メモ欄からデータを取得。
    
    @visible_timing = 0
    
    #戦闘時非表示のキーワードが含まれている場合は1を返す。
    
    @visible_timing = 1 if self.note.include?(INVISIBLE_IS::WORD1)
    
    #非戦闘時非表示のキーワードが含まれている場合は2を返す。
    
    @visible_timing = 2 if self.note.include?(INVISIBLE_IS::WORD2)
    
    #常時非表示のキーワードが含まれている場合は3を返す。
    
    @visible_timing = 3 if self.note.include?(INVISIBLE_IS::WORD3)
    
    #可視タイミングを返す。
    
    @visible_timing
    
  end
end
class RPG::UsableItem < RPG::BaseItem
  include VisibleItemTiming
end
class RPG::EquipItem < RPG::BaseItem
  include VisibleItemTiming
end